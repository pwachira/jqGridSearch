#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pharmacy.linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClientDictionary")]
	public partial class SiteClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void OnCreated()
    {
        base.ObjectTrackingEnabled = false;
        base.CommandTimeout = 180;
        //throw new NotImplementedException();
    }
    partial void InsertConnection(Connection instance);
    partial void UpdateConnection(Connection instance);
    partial void DeleteConnection(Connection instance);
    partial void InsertSiteConnection(SiteConnection instance);
    partial void UpdateSiteConnection(SiteConnection instance);
    partial void DeleteSiteConnection(SiteConnection instance);
    #endregion
		
		public SiteClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ClientDictionaryConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SiteClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SiteClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Connection> Connections
		{
			get
			{
				return this.GetTable<Connection>();
			}
		}
		
		public System.Data.Linq.Table<SiteConnection> SiteConnections
		{
			get
			{
				return this.GetTable<SiteConnection>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSiteSummaryDistinct")]
		public ISingleResult<GetSiteSummaryDistinctResult> GetSiteSummaryDistinct()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetSiteSummaryDistinctResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Connections")]
	public partial class Connection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _connection_id;
		
		private string _description;
		
		private string _connection_string;
		
		private int _ConnVendor_id;
		
		private EntitySet<SiteConnection> _SiteConnections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onconnection_idChanging(int value);
    partial void Onconnection_idChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Onconnection_stringChanging(string value);
    partial void Onconnection_stringChanged();
    partial void OnConnVendor_idChanging(int value);
    partial void OnConnVendor_idChanged();
    #endregion
		
		public Connection()
		{
			this._SiteConnections = new EntitySet<SiteConnection>(new Action<SiteConnection>(this.attach_SiteConnections), new Action<SiteConnection>(this.detach_SiteConnections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connection_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int connection_id
		{
			get
			{
				return this._connection_id;
			}
			set
			{
				if ((this._connection_id != value))
				{
					this.Onconnection_idChanging(value);
					this.SendPropertyChanging();
					this._connection_id = value;
					this.SendPropertyChanged("connection_id");
					this.Onconnection_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_connection_string", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string connection_string
		{
			get
			{
				return this._connection_string;
			}
			set
			{
				if ((this._connection_string != value))
				{
					this.Onconnection_stringChanging(value);
					this.SendPropertyChanging();
					this._connection_string = value;
					this.SendPropertyChanged("connection_string");
					this.Onconnection_stringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnVendor_id", DbType="Int NOT NULL")]
		public int ConnVendor_id
		{
			get
			{
				return this._ConnVendor_id;
			}
			set
			{
				if ((this._ConnVendor_id != value))
				{
					this.OnConnVendor_idChanging(value);
					this.SendPropertyChanging();
					this._ConnVendor_id = value;
					this.SendPropertyChanged("ConnVendor_id");
					this.OnConnVendor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Connection_SiteConnection", Storage="_SiteConnections", ThisKey="connection_id", OtherKey="Connection_id")]
		public EntitySet<SiteConnection> SiteConnections
		{
			get
			{
				return this._SiteConnections;
			}
			set
			{
				this._SiteConnections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SiteConnections(SiteConnection entity)
		{
			this.SendPropertyChanging();
			entity.Connection = this;
		}
		
		private void detach_SiteConnections(SiteConnection entity)
		{
			this.SendPropertyChanging();
			entity.Connection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteConnections")]
	public partial class SiteConnection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SiteCode;
		
		private int _Connection_DBVersion;
		
		private int _Connection_id;
		
		private int _ConnType_id;
		
		private EntityRef<Connection> _Connection;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteCodeChanging(string value);
    partial void OnSiteCodeChanged();
    partial void OnConnection_DBVersionChanging(int value);
    partial void OnConnection_DBVersionChanged();
    partial void OnConnection_idChanging(int value);
    partial void OnConnection_idChanged();
    partial void OnConnType_idChanging(int value);
    partial void OnConnType_idChanged();
    #endregion
		
		public SiteConnection()
		{
			this._Connection = default(EntityRef<Connection>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SiteCode
		{
			get
			{
				return this._SiteCode;
			}
			set
			{
				if ((this._SiteCode != value))
				{
					this.OnSiteCodeChanging(value);
					this.SendPropertyChanging();
					this._SiteCode = value;
					this.SendPropertyChanged("SiteCode");
					this.OnSiteCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Connection_DBVersion", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Connection_DBVersion
		{
			get
			{
				return this._Connection_DBVersion;
			}
			set
			{
				if ((this._Connection_DBVersion != value))
				{
					this.OnConnection_DBVersionChanging(value);
					this.SendPropertyChanging();
					this._Connection_DBVersion = value;
					this.SendPropertyChanged("Connection_DBVersion");
					this.OnConnection_DBVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Connection_id", DbType="Int NOT NULL")]
		public int Connection_id
		{
			get
			{
				return this._Connection_id;
			}
			set
			{
				if ((this._Connection_id != value))
				{
					if (this._Connection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConnection_idChanging(value);
					this.SendPropertyChanging();
					this._Connection_id = value;
					this.SendPropertyChanged("Connection_id");
					this.OnConnection_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnType_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConnType_id
		{
			get
			{
				return this._ConnType_id;
			}
			set
			{
				if ((this._ConnType_id != value))
				{
					this.OnConnType_idChanging(value);
					this.SendPropertyChanging();
					this._ConnType_id = value;
					this.SendPropertyChanged("ConnType_id");
					this.OnConnType_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Connection_SiteConnection", Storage="_Connection", ThisKey="Connection_id", OtherKey="connection_id", IsForeignKey=true)]
		public Connection Connection
		{
			get
			{
				return this._Connection.Entity;
			}
			set
			{
				Connection previousValue = this._Connection.Entity;
				if (((previousValue != value) 
							|| (this._Connection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Connection.Entity = null;
						previousValue.SiteConnections.Remove(this);
					}
					this._Connection.Entity = value;
					if ((value != null))
					{
						value.SiteConnections.Add(this);
						this._Connection_id = value.connection_id;
					}
					else
					{
						this._Connection_id = default(int);
					}
					this.SendPropertyChanged("Connection");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetSiteSummaryDistinctResult
	{
		
		private string _SiteCode;
		
		public GetSiteSummaryDistinctResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SiteCode
		{
			get
			{
				return this._SiteCode;
			}
			set
			{
				if ((this._SiteCode != value))
				{
					this._SiteCode = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
